"""
Script de debugging para analizar el flujo completo de datos en simulaci√≥n
"""

print("üîç AN√ÅLISIS COMPLETO DEL FLUJO DE SIMULACI√ìN")
print("=" * 60)

print("\nüì± FRONTEND -> BACKEND:")
print("1. Frontend env√≠a impactLocation: { lat: X, lon: Y }")
print("2. Backend recibe simulation_request.impact_location")
print("3. Backend extrae: impact_lat = impact_location.get('lat', 0)")
print("4. Backend llama: demographic_service.estimate_casualties(lat, lon, crater, energy)")

print("\nüîç PROBLEMA IDENTIFICADO:")
print("El servicio demogr√°fico EST√Å recibiendo las coordenadas correctas,")
print("pero siempre devuelve resultados similares porque:")

print("\n‚ùå ISSUE #1: Detecci√≥n de oc√©ano defectuosa")
print("   La funci√≥n _is_ocean() usa rangos muy amplios que clasifican")
print("   muchas √°reas terrestres como oc√©ano")

print("\n‚ùå ISSUE #2: Clasificaci√≥n de regi√≥n muy b√°sica") 
print("   Solo tiene 6 ciudades principales en major_cities")
print("   Si no est√° cerca de esas 6, siempre clasifica como 'rural_sparse'")

print("\n‚ùå ISSUE #3: C√°lculo de v√≠ctimas por √°rea circular")
print("   Usa œÄ √ó radio¬≤ √ó densidad fija")
print("   No considera variaciones reales de poblaci√≥n en el √°rea")

print("\n‚ùå ISSUE #4: Datos econ√≥micos fijos por tipo")
print("   Mismo multiplier econ√≥mico para toda una regi√≥n")
print("   No considera diferencias dentro de la regi√≥n")

print("\nüéØ EJEMPLOS PROBLEM√ÅTICOS:")

# Simular coordenadas espec√≠ficas
test_locations = [
    {"name": "Tokyo Centro", "lat": 35.6762, "lon": 139.6503, "expected": "urban_major"},
    {"name": "Oc√©ano Pac√≠fico", "lat": 0, "lon": -150, "expected": "ocean"},
    {"name": "Nueva York", "lat": 40.7128, "lon": -74.0060, "expected": "urban_major"},
    {"name": "Sahara", "lat": 23.8, "lon": 11.0, "expected": "desert"},
    {"name": "Amazonas", "lat": -3.0, "lon": -60.0, "expected": "forest"},
]

print("\nProbando clasificaci√≥n de regiones:")
for loc in test_locations:
    lat, lon = loc["lat"], loc["lon"]
    
    # Simular detecci√≥n de oc√©ano
    is_ocean = False
    if -60 < lat < 60 and ((120 < lon < 180) or (-180 < lon < -80)):
        is_ocean = True
    elif -60 < lat < 70 and -80 < lon < 20:
        is_ocean = True
    elif -60 < lat < 30 and 20 < lon < 120:
        is_ocean = True
    
    if is_ocean:
        classified = "ocean"
        density = 0
    else:
        # Simular distancia a ciudad m√°s cercana (simplificado)
        major_cities = {
            "tokyo": {"lat": 35.6762, "lon": 139.6503, "population": 37400000},
            "new_york": {"lat": 40.7128, "lon": -74.0060, "population": 18804000},
        }
        
        min_distance = float('inf')
        nearest_city = None
        for city_name, city_data in major_cities.items():
            # C√°lculo simplificado de distancia
            distance = ((lat - city_data["lat"])**2 + (lon - city_data["lon"])**2)**0.5 * 111
            if distance < min_distance:
                min_distance = distance
                nearest_city = {"name": city_name, "distance": distance, "population": city_data["population"]}
        
        if nearest_city and min_distance < 25 and nearest_city["population"] > 20000000:
            classified = "urban_major"
            density = 10000
        elif nearest_city and min_distance < 200:
            classified = "suburban"
            density = 500
        else:
            classified = "rural_sparse"
            density = 25
    
    # Simular c√°lculo de v√≠ctimas para crater de 1km
    crater_diameter = 1.0  # km
    immediate_radius = crater_diameter / 2
    area = 3.14159 * (immediate_radius ** 2)
    population = area * density
    casualties = int(population * 0.95)
    
    print(f"   {loc['name']:15} -> {classified:12} (density: {density:5}/km¬≤) -> {casualties:6} v√≠ctimas")
    if classified != loc['expected']:
        print(f"      ‚ö†Ô∏è  ESPERADO: {loc['expected']}")

print("\nüö® CONCLUSI√ìN:")
print("El sistema demogr√°fico tiene varios problemas de l√≥gica que causan:")
print("1. Detecci√≥n incorrecta de oc√©anos vs tierra")
print("2. Clasificaci√≥n muy b√°sica de regiones") 
print("3. Densidades poblacionales fijas y poco realistas")
print("4. Mismo resultado para ubicaciones muy diferentes")

print("\nüí° SOLUCIONES RECOMENDADAS:")
print("1. Mejorar detecci√≥n de oc√©anos con datos geogr√°ficos reales")
print("2. Expandir base de datos de ciudades principales")
print("3. Usar gradientes de densidad poblacional")
print("4. Implementar interpolaci√≥n entre diferentes tipos de terreno")
print("5. Agregar m√°s factores geogr√°ficos (costa, monta√±a, etc.)")